// source: proto/relay.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lavanet.lava.pairing.RelayReply', null, global);
goog.exportSymbol('proto.lavanet.lava.pairing.RelayRequest', null, global);
goog.exportSymbol('proto.lavanet.lava.pairing.VRFData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.pairing.RelayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.pairing.RelayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lavanet.lava.pairing.RelayRequest.displayName = 'proto.lavanet.lava.pairing.RelayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.pairing.RelayReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.pairing.RelayReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lavanet.lava.pairing.RelayReply.displayName = 'proto.lavanet.lava.pairing.RelayReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.pairing.VRFData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.pairing.VRFData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lavanet.lava.pairing.VRFData.displayName = 'proto.lavanet.lava.pairing.VRFData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.pairing.RelayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.pairing.RelayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.RelayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainID: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connection_type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    api_url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    session_id: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cu_sum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    sig: msg.getSig_asB64(),
    provider: jspb.Message.getFieldWithDefault(msg, 8, ""),
    block_height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    relay_num: jspb.Message.getFieldWithDefault(msg, 10, 0),
    request_block: jspb.Message.getFieldWithDefault(msg, 11, 0),
    datareliability: (f = msg.getDatareliability()) && proto.lavanet.lava.pairing.VRFData.toObject(includeInstance, f),
    unresponsive_providers: msg.getUnresponsiveProviders_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.pairing.RelayRequest}
 */
proto.lavanet.lava.pairing.RelayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.pairing.RelayRequest;
  return proto.lavanet.lava.pairing.RelayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.pairing.RelayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.pairing.RelayRequest}
 */
proto.lavanet.lava.pairing.RelayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCuSum(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRelayNum(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestBlock(value);
      break;
    case 12:
      var value = new proto.lavanet.lava.pairing.VRFData;
      reader.readMessage(value,proto.lavanet.lava.pairing.VRFData.deserializeBinaryFromReader);
      msg.setDatareliability(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnresponsiveProviders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.pairing.RelayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.pairing.RelayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.RelayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCuSum();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getRelayNum();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getRequestBlock();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getDatareliability();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.lavanet.lava.pairing.VRFData.serializeBinaryToWriter
    );
  }
  f = message.getUnresponsiveProviders_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
};


/**
 * optional string chainID = 1;
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_type = 2;
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getConnectionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setConnectionType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_url = 3;
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getApiUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setApiUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 session_id = 4;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 cu_sum = 5;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getCuSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setCuSum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes sig = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes sig = 7;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string provider = 8;
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 block_height = 9;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 relay_num = 10;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getRelayNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setRelayNum = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 request_block = 11;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getRequestBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setRequestBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional VRFData DataReliability = 12;
 * @return {?proto.lavanet.lava.pairing.VRFData}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getDatareliability = function() {
  return /** @type{?proto.lavanet.lava.pairing.VRFData} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.pairing.VRFData, 12));
};


/**
 * @param {?proto.lavanet.lava.pairing.VRFData|undefined} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
*/
proto.lavanet.lava.pairing.RelayRequest.prototype.setDatareliability = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.clearDatareliability = function() {
  return this.setDatareliability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.hasDatareliability = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes unresponsive_providers = 14;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getUnresponsiveProviders = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes unresponsive_providers = 14;
 * This is a type-conversion wrapper around `getUnresponsiveProviders()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getUnresponsiveProviders_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnresponsiveProviders()));
};


/**
 * optional bytes unresponsive_providers = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnresponsiveProviders()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.getUnresponsiveProviders_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnresponsiveProviders()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayRequest} returns this
 */
proto.lavanet.lava.pairing.RelayRequest.prototype.setUnresponsiveProviders = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.pairing.RelayReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.pairing.RelayReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.RelayReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    sig: msg.getSig_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    latestBlock: jspb.Message.getFieldWithDefault(msg, 4, 0),
    finalizedBlocksHashes: msg.getFinalizedBlocksHashes_asB64(),
    sigBlocks: msg.getSigBlocks_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.pairing.RelayReply}
 */
proto.lavanet.lava.pairing.RelayReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.pairing.RelayReply;
  return proto.lavanet.lava.pairing.RelayReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.pairing.RelayReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.pairing.RelayReply}
 */
proto.lavanet.lava.pairing.RelayReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestBlock(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFinalizedBlocksHashes(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.pairing.RelayReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.pairing.RelayReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.RelayReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLatestBlock();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFinalizedBlocksHashes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSigBlocks_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig = 2;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 nonce = 3;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 latest_block = 4;
 * @return {number}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getLatestBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setLatestBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes finalized_blocks_hashes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getFinalizedBlocksHashes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes finalized_blocks_hashes = 5;
 * This is a type-conversion wrapper around `getFinalizedBlocksHashes()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getFinalizedBlocksHashes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFinalizedBlocksHashes()));
};


/**
 * optional bytes finalized_blocks_hashes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFinalizedBlocksHashes()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getFinalizedBlocksHashes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFinalizedBlocksHashes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setFinalizedBlocksHashes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes sig_blocks = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSigBlocks = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes sig_blocks = 6;
 * This is a type-conversion wrapper around `getSigBlocks()`
 * @return {string}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSigBlocks_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigBlocks()));
};


/**
 * optional bytes sig_blocks = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigBlocks()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.RelayReply.prototype.getSigBlocks_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigBlocks()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.RelayReply} returns this
 */
proto.lavanet.lava.pairing.RelayReply.prototype.setSigBlocks = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.pairing.VRFData.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.pairing.VRFData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.pairing.VRFData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.VRFData.toObject = function(includeInstance, msg) {
  var f, obj = {
    differentiator: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    vrfValue: msg.getVrfValue_asB64(),
    vrfProof: msg.getVrfProof_asB64(),
    providerSig: msg.getProviderSig_asB64(),
    alldatahash: msg.getAlldatahash_asB64(),
    queryhash: msg.getQueryhash_asB64(),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.pairing.VRFData}
 */
proto.lavanet.lava.pairing.VRFData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.pairing.VRFData;
  return proto.lavanet.lava.pairing.VRFData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.pairing.VRFData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.pairing.VRFData}
 */
proto.lavanet.lava.pairing.VRFData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDifferentiator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVrfValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVrfProof(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProviderSig(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlldatahash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQueryhash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.pairing.VRFData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.pairing.VRFData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.pairing.VRFData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDifferentiator();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVrfValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVrfProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProviderSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAlldatahash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getQueryhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bool differentiator = 1;
 * @return {boolean}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getDifferentiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setDifferentiator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes vrf_value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes vrf_value = 2;
 * This is a type-conversion wrapper around `getVrfValue()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVrfValue()));
};


/**
 * optional bytes vrf_value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVrfValue()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVrfValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setVrfValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes vrf_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes vrf_proof = 3;
 * This is a type-conversion wrapper around `getVrfProof()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVrfProof()));
};


/**
 * optional bytes vrf_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVrfProof()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getVrfProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVrfProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setVrfProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes provider_sig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getProviderSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes provider_sig = 4;
 * This is a type-conversion wrapper around `getProviderSig()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getProviderSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProviderSig()));
};


/**
 * optional bytes provider_sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProviderSig()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getProviderSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProviderSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setProviderSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes allDataHash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getAlldatahash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes allDataHash = 5;
 * This is a type-conversion wrapper around `getAlldatahash()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getAlldatahash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlldatahash()));
};


/**
 * optional bytes allDataHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlldatahash()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getAlldatahash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlldatahash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setAlldatahash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes queryHash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getQueryhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes queryHash = 6;
 * This is a type-conversion wrapper around `getQueryhash()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getQueryhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQueryhash()));
};


/**
 * optional bytes queryHash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQueryhash()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getQueryhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQueryhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setQueryhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes sig = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes sig = 7;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.pairing.VRFData.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lavanet.lava.pairing.VRFData} returns this
 */
proto.lavanet.lava.pairing.VRFData.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


goog.object.extend(exports, proto.lavanet.lava.pairing);
