import Long from "long";
import _m0 from "protobufjs/minimal";
import { FinalizationConflict, ResponseConflict } from "./conflict_data";
export declare const protobufPackage = "lavanet.lava.conflict";
/** TODO:: change coin type to another proto (define proto in another file int this directory) */
export interface MsgDetection {
    creator: string;
    finalizationConflict?: FinalizationConflict;
    responseConflict?: ResponseConflict;
    sameProviderConflict?: FinalizationConflict;
}
export interface MsgDetectionResponse {
}
export interface MsgConflictVoteCommit {
    creator: string;
    voteID: string;
    hash: Uint8Array;
}
export interface MsgConflictVoteCommitResponse {
}
export interface MsgConflictVoteReveal {
    creator: string;
    voteID: string;
    nonce: Long;
    hash: Uint8Array;
}
export interface MsgConflictVoteRevealResponse {
}
export declare const MsgDetection: {
    encode(message: MsgDetection, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDetection;
    fromJSON(object: any): MsgDetection;
    toJSON(message: MsgDetection): unknown;
    create<I extends {
        creator?: string | undefined;
        finalizationConflict?: {
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        responseConflict?: {
            conflictRelayData0?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
            conflictRelayData1?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        sameProviderConflict?: {
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        finalizationConflict?: ({
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            relayReply0?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K in Exclude<keyof I["finalizationConflict"]["relayReply0"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_1 in Exclude<keyof I["finalizationConflict"]["relayReply0"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_2 in Exclude<keyof I["finalizationConflict"]["relayReply0"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["finalizationConflict"]["relayReply0"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            relayReply1?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_4 in Exclude<keyof I["finalizationConflict"]["relayReply1"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_5 in Exclude<keyof I["finalizationConflict"]["relayReply1"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_6 in Exclude<keyof I["finalizationConflict"]["relayReply1"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_7 in Exclude<keyof I["finalizationConflict"]["relayReply1"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["finalizationConflict"], keyof FinalizationConflict>]: never; }) | undefined;
        responseConflict?: ({
            conflictRelayData0?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
            conflictRelayData1?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
        } & {
            conflictRelayData0?: ({
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } & {
                request?: ({
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } & {
                    relaySession?: ({
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } & {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_9 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["sessionId"], keyof Long>]: never; }) | undefined;
                        cuSum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_10 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["cuSum"], keyof Long>]: never; }) | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_11 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["relayNum"], keyof Long>]: never; }) | undefined;
                        qosReport?: ({
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & { [K_12 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["qosReport"], keyof import("../pairing/relay").QualityOfServiceReport>]: never; }) | undefined;
                        epoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_13 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["epoch"], keyof Long>]: never; }) | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: ({
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & {
                            cuAllocation?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_14 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                            epoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_15 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & { [K_16 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"], keyof import("../pairing/badges").Badge>]: never; }) | undefined;
                    } & { [K_17 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relaySession"], keyof import("../pairing/relay").RelaySession>]: never; }) | undefined;
                    relayData?: ({
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } & {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_18 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["requestBlock"], keyof Long>]: never; }) | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: ({
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] & ({
                            name?: string | undefined;
                            value?: string | undefined;
                        } & {
                            name?: string | undefined;
                            value?: string | undefined;
                        } & { [K_19 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_20 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["metadata"], keyof {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_21 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"]["relayData"], keyof import("../pairing/relay").RelayPrivateData>]: never; }) | undefined;
                } & { [K_22 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["request"], keyof import("../pairing/relay").RelayRequest>]: never; }) | undefined;
                reply?: ({
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } & {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_23 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["reply"]["latestBlock"], keyof Long>]: never; }) | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: ({
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] & ({
                        name?: string | undefined;
                        value?: string | undefined;
                    } & {
                        name?: string | undefined;
                        value?: string | undefined;
                    } & { [K_24 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["reply"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_25 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["reply"]["metadata"], keyof {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_26 in Exclude<keyof I["responseConflict"]["conflictRelayData0"]["reply"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            } & { [K_27 in Exclude<keyof I["responseConflict"]["conflictRelayData0"], keyof import("./conflict_data").ConflictRelayData>]: never; }) | undefined;
            conflictRelayData1?: ({
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } & {
                request?: ({
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } & {
                    relaySession?: ({
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } & {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_28 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["sessionId"], keyof Long>]: never; }) | undefined;
                        cuSum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_29 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["cuSum"], keyof Long>]: never; }) | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_30 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["relayNum"], keyof Long>]: never; }) | undefined;
                        qosReport?: ({
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & { [K_31 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["qosReport"], keyof import("../pairing/relay").QualityOfServiceReport>]: never; }) | undefined;
                        epoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_32 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["epoch"], keyof Long>]: never; }) | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: ({
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & {
                            cuAllocation?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_33 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                            epoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_34 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & { [K_35 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"], keyof import("../pairing/badges").Badge>]: never; }) | undefined;
                    } & { [K_36 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relaySession"], keyof import("../pairing/relay").RelaySession>]: never; }) | undefined;
                    relayData?: ({
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } & {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_37 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["requestBlock"], keyof Long>]: never; }) | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: ({
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] & ({
                            name?: string | undefined;
                            value?: string | undefined;
                        } & {
                            name?: string | undefined;
                            value?: string | undefined;
                        } & { [K_38 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_39 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["metadata"], keyof {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_40 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"]["relayData"], keyof import("../pairing/relay").RelayPrivateData>]: never; }) | undefined;
                } & { [K_41 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["request"], keyof import("../pairing/relay").RelayRequest>]: never; }) | undefined;
                reply?: ({
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } & {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_42 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["reply"]["latestBlock"], keyof Long>]: never; }) | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: ({
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] & ({
                        name?: string | undefined;
                        value?: string | undefined;
                    } & {
                        name?: string | undefined;
                        value?: string | undefined;
                    } & { [K_43 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["reply"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_44 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["reply"]["metadata"], keyof {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_45 in Exclude<keyof I["responseConflict"]["conflictRelayData1"]["reply"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            } & { [K_46 in Exclude<keyof I["responseConflict"]["conflictRelayData1"], keyof import("./conflict_data").ConflictRelayData>]: never; }) | undefined;
        } & { [K_47 in Exclude<keyof I["responseConflict"], keyof ResponseConflict>]: never; }) | undefined;
        sameProviderConflict?: ({
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            relayReply0?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_48 in Exclude<keyof I["sameProviderConflict"]["relayReply0"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_49 in Exclude<keyof I["sameProviderConflict"]["relayReply0"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_50 in Exclude<keyof I["sameProviderConflict"]["relayReply0"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_51 in Exclude<keyof I["sameProviderConflict"]["relayReply0"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            relayReply1?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_52 in Exclude<keyof I["sameProviderConflict"]["relayReply1"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_53 in Exclude<keyof I["sameProviderConflict"]["relayReply1"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_54 in Exclude<keyof I["sameProviderConflict"]["relayReply1"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_55 in Exclude<keyof I["sameProviderConflict"]["relayReply1"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
        } & { [K_56 in Exclude<keyof I["sameProviderConflict"], keyof FinalizationConflict>]: never; }) | undefined;
    } & { [K_57 in Exclude<keyof I, keyof MsgDetection>]: never; }>(base?: I | undefined): MsgDetection;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        finalizationConflict?: {
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        responseConflict?: {
            conflictRelayData0?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
            conflictRelayData1?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        sameProviderConflict?: {
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        finalizationConflict?: ({
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            relayReply0?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_58 in Exclude<keyof I_1["finalizationConflict"]["relayReply0"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_59 in Exclude<keyof I_1["finalizationConflict"]["relayReply0"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_60 in Exclude<keyof I_1["finalizationConflict"]["relayReply0"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_61 in Exclude<keyof I_1["finalizationConflict"]["relayReply0"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            relayReply1?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_62 in Exclude<keyof I_1["finalizationConflict"]["relayReply1"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_63 in Exclude<keyof I_1["finalizationConflict"]["relayReply1"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_64 in Exclude<keyof I_1["finalizationConflict"]["relayReply1"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_65 in Exclude<keyof I_1["finalizationConflict"]["relayReply1"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
        } & { [K_66 in Exclude<keyof I_1["finalizationConflict"], keyof FinalizationConflict>]: never; }) | undefined;
        responseConflict?: ({
            conflictRelayData0?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
            conflictRelayData1?: {
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
        } & {
            conflictRelayData0?: ({
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } & {
                request?: ({
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } & {
                    relaySession?: ({
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } & {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_67 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["sessionId"], keyof Long>]: never; }) | undefined;
                        cuSum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_68 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["cuSum"], keyof Long>]: never; }) | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_69 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["relayNum"], keyof Long>]: never; }) | undefined;
                        qosReport?: ({
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & { [K_70 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["qosReport"], keyof import("../pairing/relay").QualityOfServiceReport>]: never; }) | undefined;
                        epoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_71 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["epoch"], keyof Long>]: never; }) | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: ({
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & {
                            cuAllocation?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_72 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                            epoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_73 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & { [K_74 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"]["badge"], keyof import("../pairing/badges").Badge>]: never; }) | undefined;
                    } & { [K_75 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relaySession"], keyof import("../pairing/relay").RelaySession>]: never; }) | undefined;
                    relayData?: ({
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } & {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_76 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["requestBlock"], keyof Long>]: never; }) | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: ({
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] & ({
                            name?: string | undefined;
                            value?: string | undefined;
                        } & {
                            name?: string | undefined;
                            value?: string | undefined;
                        } & { [K_77 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_78 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relayData"]["metadata"], keyof {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_79 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"]["relayData"], keyof import("../pairing/relay").RelayPrivateData>]: never; }) | undefined;
                } & { [K_80 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["request"], keyof import("../pairing/relay").RelayRequest>]: never; }) | undefined;
                reply?: ({
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } & {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_81 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["reply"]["latestBlock"], keyof Long>]: never; }) | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: ({
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] & ({
                        name?: string | undefined;
                        value?: string | undefined;
                    } & {
                        name?: string | undefined;
                        value?: string | undefined;
                    } & { [K_82 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["reply"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_83 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["reply"]["metadata"], keyof {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_84 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"]["reply"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            } & { [K_85 in Exclude<keyof I_1["responseConflict"]["conflictRelayData0"], keyof import("./conflict_data").ConflictRelayData>]: never; }) | undefined;
            conflictRelayData1?: ({
                request?: {
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                reply?: {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined;
            } & {
                request?: ({
                    relaySession?: {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    relayData?: {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } & {
                    relaySession?: ({
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | Long | undefined;
                        cuSum?: string | number | Long | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | Long | undefined;
                        qosReport?: {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } | undefined;
                        epoch?: string | number | Long | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: {
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } | undefined;
                    } & {
                        specId?: string | undefined;
                        contentHash?: Uint8Array | undefined;
                        sessionId?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_86 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["sessionId"], keyof Long>]: never; }) | undefined;
                        cuSum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_87 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["cuSum"], keyof Long>]: never; }) | undefined;
                        provider?: string | undefined;
                        relayNum?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_88 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["relayNum"], keyof Long>]: never; }) | undefined;
                        qosReport?: ({
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & {
                            latency?: string | undefined;
                            availability?: string | undefined;
                            sync?: string | undefined;
                        } & { [K_89 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["qosReport"], keyof import("../pairing/relay").QualityOfServiceReport>]: never; }) | undefined;
                        epoch?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_90 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["epoch"], keyof Long>]: never; }) | undefined;
                        unresponsiveProviders?: Uint8Array | undefined;
                        lavaChainId?: string | undefined;
                        sig?: Uint8Array | undefined;
                        badge?: ({
                            cuAllocation?: string | number | Long | undefined;
                            epoch?: string | number | Long | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & {
                            cuAllocation?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_91 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                            epoch?: string | number | (Long & {
                                high: number;
                                low: number;
                                unsigned: boolean;
                                add: (addend: string | number | Long) => Long;
                                and: (other: string | number | Long) => Long;
                                compare: (other: string | number | Long) => number;
                                comp: (other: string | number | Long) => number;
                                divide: (divisor: string | number | Long) => Long;
                                div: (divisor: string | number | Long) => Long;
                                equals: (other: string | number | Long) => boolean;
                                eq: (other: string | number | Long) => boolean;
                                getHighBits: () => number;
                                getHighBitsUnsigned: () => number;
                                getLowBits: () => number;
                                getLowBitsUnsigned: () => number;
                                getNumBitsAbs: () => number;
                                greaterThan: (other: string | number | Long) => boolean;
                                gt: (other: string | number | Long) => boolean;
                                greaterThanOrEqual: (other: string | number | Long) => boolean;
                                gte: (other: string | number | Long) => boolean;
                                ge: (other: string | number | Long) => boolean;
                                isEven: () => boolean;
                                isNegative: () => boolean;
                                isOdd: () => boolean;
                                isPositive: () => boolean;
                                isZero: () => boolean;
                                eqz: () => boolean;
                                lessThan: (other: string | number | Long) => boolean;
                                lt: (other: string | number | Long) => boolean;
                                lessThanOrEqual: (other: string | number | Long) => boolean;
                                lte: (other: string | number | Long) => boolean;
                                le: (other: string | number | Long) => boolean;
                                modulo: (other: string | number | Long) => Long;
                                mod: (other: string | number | Long) => Long;
                                rem: (other: string | number | Long) => Long;
                                multiply: (multiplier: string | number | Long) => Long;
                                mul: (multiplier: string | number | Long) => Long;
                                negate: () => Long;
                                neg: () => Long;
                                not: () => Long;
                                countLeadingZeros: () => number;
                                clz: () => number;
                                countTrailingZeros: () => number;
                                ctz: () => number;
                                notEquals: (other: string | number | Long) => boolean;
                                neq: (other: string | number | Long) => boolean;
                                ne: (other: string | number | Long) => boolean;
                                or: (other: string | number | Long) => Long;
                                shiftLeft: (numBits: number | Long) => Long;
                                shl: (numBits: number | Long) => Long;
                                shiftRight: (numBits: number | Long) => Long;
                                shr: (numBits: number | Long) => Long;
                                shiftRightUnsigned: (numBits: number | Long) => Long;
                                shru: (numBits: number | Long) => Long;
                                shr_u: (numBits: number | Long) => Long;
                                rotateLeft: (numBits: number | Long) => Long;
                                rotl: (numBits: number | Long) => Long;
                                rotateRight: (numBits: number | Long) => Long;
                                rotr: (numBits: number | Long) => Long;
                                subtract: (subtrahend: string | number | Long) => Long;
                                sub: (subtrahend: string | number | Long) => Long;
                                toInt: () => number;
                                toNumber: () => number;
                                toBytes: (le?: boolean | undefined) => number[];
                                toBytesLE: () => number[];
                                toBytesBE: () => number[];
                                toSigned: () => Long;
                                toString: (radix?: number | undefined) => string;
                                toUnsigned: () => Long;
                                xor: (other: string | number | Long) => Long;
                            } & { [K_92 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                            address?: string | undefined;
                            lavaChainId?: string | undefined;
                            projectSig?: Uint8Array | undefined;
                        } & { [K_93 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"]["badge"], keyof import("../pairing/badges").Badge>]: never; }) | undefined;
                    } & { [K_94 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relaySession"], keyof import("../pairing/relay").RelaySession>]: never; }) | undefined;
                    relayData?: ({
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | Long | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } & {
                        connectionType?: string | undefined;
                        apiUrl?: string | undefined;
                        data?: Uint8Array | undefined;
                        requestBlock?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & { [K_95 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["requestBlock"], keyof Long>]: never; }) | undefined;
                        apiInterface?: string | undefined;
                        salt?: Uint8Array | undefined;
                        metadata?: ({
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] & ({
                            name?: string | undefined;
                            value?: string | undefined;
                        } & {
                            name?: string | undefined;
                            value?: string | undefined;
                        } & { [K_96 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_97 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relayData"]["metadata"], keyof {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_98 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"]["relayData"], keyof import("../pairing/relay").RelayPrivateData>]: never; }) | undefined;
                } & { [K_99 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["request"], keyof import("../pairing/relay").RelayRequest>]: never; }) | undefined;
                reply?: ({
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | Long | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } & {
                    data?: Uint8Array | undefined;
                    sig?: Uint8Array | undefined;
                    nonce?: number | undefined;
                    latestBlock?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_100 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["reply"]["latestBlock"], keyof Long>]: never; }) | undefined;
                    finalizedBlocksHashes?: Uint8Array | undefined;
                    sigBlocks?: Uint8Array | undefined;
                    metadata?: ({
                        name?: string | undefined;
                        value?: string | undefined;
                    }[] & ({
                        name?: string | undefined;
                        value?: string | undefined;
                    } & {
                        name?: string | undefined;
                        value?: string | undefined;
                    } & { [K_101 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["reply"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_102 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["reply"]["metadata"], keyof {
                        name?: string | undefined;
                        value?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_103 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"]["reply"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            } & { [K_104 in Exclude<keyof I_1["responseConflict"]["conflictRelayData1"], keyof import("./conflict_data").ConflictRelayData>]: never; }) | undefined;
        } & { [K_105 in Exclude<keyof I_1["responseConflict"], keyof ResponseConflict>]: never; }) | undefined;
        sameProviderConflict?: ({
            relayReply0?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            relayReply1?: {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            relayReply0?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_106 in Exclude<keyof I_1["sameProviderConflict"]["relayReply0"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_107 in Exclude<keyof I_1["sameProviderConflict"]["relayReply0"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_108 in Exclude<keyof I_1["sameProviderConflict"]["relayReply0"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_109 in Exclude<keyof I_1["sameProviderConflict"]["relayReply0"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
            relayReply1?: ({
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | Long | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: {
                    name?: string | undefined;
                    value?: string | undefined;
                }[] | undefined;
            } & {
                data?: Uint8Array | undefined;
                sig?: Uint8Array | undefined;
                nonce?: number | undefined;
                latestBlock?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_110 in Exclude<keyof I_1["sameProviderConflict"]["relayReply1"]["latestBlock"], keyof Long>]: never; }) | undefined;
                finalizedBlocksHashes?: Uint8Array | undefined;
                sigBlocks?: Uint8Array | undefined;
                metadata?: ({
                    name?: string | undefined;
                    value?: string | undefined;
                }[] & ({
                    name?: string | undefined;
                    value?: string | undefined;
                } & {
                    name?: string | undefined;
                    value?: string | undefined;
                } & { [K_111 in Exclude<keyof I_1["sameProviderConflict"]["relayReply1"]["metadata"][number], keyof import("../pairing/relay").Metadata>]: never; })[] & { [K_112 in Exclude<keyof I_1["sameProviderConflict"]["relayReply1"]["metadata"], keyof {
                    name?: string | undefined;
                    value?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_113 in Exclude<keyof I_1["sameProviderConflict"]["relayReply1"], keyof import("../pairing/relay").RelayReply>]: never; }) | undefined;
        } & { [K_114 in Exclude<keyof I_1["sameProviderConflict"], keyof FinalizationConflict>]: never; }) | undefined;
    } & { [K_115 in Exclude<keyof I_1, keyof MsgDetection>]: never; }>(object: I_1): MsgDetection;
};
export declare const MsgDetectionResponse: {
    encode(_: MsgDetectionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDetectionResponse;
    fromJSON(_: any): MsgDetectionResponse;
    toJSON(_: MsgDetectionResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgDetectionResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgDetectionResponse;
};
export declare const MsgConflictVoteCommit: {
    encode(message: MsgConflictVoteCommit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConflictVoteCommit;
    fromJSON(object: any): MsgConflictVoteCommit;
    toJSON(message: MsgConflictVoteCommit): unknown;
    create<I extends {
        creator?: string | undefined;
        voteID?: string | undefined;
        hash?: Uint8Array | undefined;
    } & {
        creator?: string | undefined;
        voteID?: string | undefined;
        hash?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof MsgConflictVoteCommit>]: never; }>(base?: I | undefined): MsgConflictVoteCommit;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        voteID?: string | undefined;
        hash?: Uint8Array | undefined;
    } & {
        creator?: string | undefined;
        voteID?: string | undefined;
        hash?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgConflictVoteCommit>]: never; }>(object: I_1): MsgConflictVoteCommit;
};
export declare const MsgConflictVoteCommitResponse: {
    encode(_: MsgConflictVoteCommitResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConflictVoteCommitResponse;
    fromJSON(_: any): MsgConflictVoteCommitResponse;
    toJSON(_: MsgConflictVoteCommitResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgConflictVoteCommitResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgConflictVoteCommitResponse;
};
export declare const MsgConflictVoteReveal: {
    encode(message: MsgConflictVoteReveal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConflictVoteReveal;
    fromJSON(object: any): MsgConflictVoteReveal;
    toJSON(message: MsgConflictVoteReveal): unknown;
    create<I extends {
        creator?: string | undefined;
        voteID?: string | undefined;
        nonce?: string | number | Long | undefined;
        hash?: Uint8Array | undefined;
    } & {
        creator?: string | undefined;
        voteID?: string | undefined;
        nonce?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["nonce"], keyof Long>]: never; }) | undefined;
        hash?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgConflictVoteReveal>]: never; }>(base?: I | undefined): MsgConflictVoteReveal;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        voteID?: string | undefined;
        nonce?: string | number | Long | undefined;
        hash?: Uint8Array | undefined;
    } & {
        creator?: string | undefined;
        voteID?: string | undefined;
        nonce?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I_1["nonce"], keyof Long>]: never; }) | undefined;
        hash?: Uint8Array | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgConflictVoteReveal>]: never; }>(object: I_1): MsgConflictVoteReveal;
};
export declare const MsgConflictVoteRevealResponse: {
    encode(_: MsgConflictVoteRevealResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConflictVoteRevealResponse;
    fromJSON(_: any): MsgConflictVoteRevealResponse;
    toJSON(_: MsgConflictVoteRevealResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgConflictVoteRevealResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgConflictVoteRevealResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    Detection(request: MsgDetection): Promise<MsgDetectionResponse>;
    ConflictVoteCommit(request: MsgConflictVoteCommit): Promise<MsgConflictVoteCommitResponse>;
    /** this line is used by starport scaffolding # proto/tx/rpc */
    ConflictVoteReveal(request: MsgConflictVoteReveal): Promise<MsgConflictVoteRevealResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Detection(request: MsgDetection): Promise<MsgDetectionResponse>;
    ConflictVoteCommit(request: MsgConflictVoteCommit): Promise<MsgConflictVoteCommitResponse>;
    ConflictVoteReveal(request: MsgConflictVoteReveal): Promise<MsgConflictVoteRevealResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
